PrimaryExpression	::=	"this"
                    |	ObjectLiteral
                    |	( "(" Expression ")" )
                    |	Identifier
                    |	ArrayLiteral
                    |	Literal
Literal	::=	( <DECIMAL_LITERAL> | <HEX_INTEGER_LITERAL> | <STRING_LITERAL> | <BOOLEAN_LITERAL> | <NULL_LITERAL> | <REGULAR_EXPRESSION_LITERAL> )
Identifier	::=	<IDENTIFIER_NAME>
ArrayLiteral	::=	"[" ( ( Elision )? "]" | ElementList Elision "]" | ( ElementList )? "]" )
ElementList	::=	( Elision )? AssignmentExpression ( Elision AssignmentExpression )*
Elision	::=	( "," )+
ObjectLiteral	::=	"{" ( PropertyNameAndValueList )? "}"
PropertyNameAndValueList	::=	PropertyNameAndValue ( "," PropertyNameAndValue | "," )*
PropertyNameAndValue	::=	PropertyName ":" AssignmentExpression
PropertyName	::=	Identifier
                |	<STRING_LITERAL>
                |	<DECIMAL_LITERAL>
MemberExpression	::=	( ( FunctionExpression | PrimaryExpression ) ( MemberExpressionPart )* )
                    |	AllocationExpression
AllocationExpression	::=	( "new" MemberExpression ( ( Arguments ( MemberExpressionPart )* )* ) )
MemberExpressionPart	::=	( "[" Expression "]" )
                        |	( "." Identifier )
CallExpression	::=	MemberExpression Arguments ( CallExpressionPart )*
CallExpressionPart	::=	Arguments
                    |	( "[" Expression "]" )
                    |	( "." Identifier )
Arguments	::=	"(" ( ArgumentList )? ")"
ArgumentList	::=	AssignmentExpression ( "," AssignmentExpression )*
LeftHandSideExpression	::=	CallExpression
                        |	MemberExpression
PostfixExpression	::=	LeftHandSideExpression ( PostfixOperator )?
PostfixOperator	::=	( "++" | "--" )
UnaryExpression	::=	( PostfixExpression | ( UnaryOperator UnaryExpression )+ )
UnaryOperator	::=	( "delete" | "void" | "typeof" | "++" | "--" | "+" | "-" | "~" | "!" )
MultiplicativeExpression	::=	UnaryExpression ( MultiplicativeOperator UnaryExpression )*
MultiplicativeOperator	::=	( "*" | <SLASH> | "%" )
AdditiveExpression	::=	MultiplicativeExpression ( AdditiveOperator MultiplicativeExpression )*
AdditiveOperator	::=	( "+" | "-" )
ShiftExpression	::=	AdditiveExpression ( ShiftOperator AdditiveExpression )*
ShiftOperator	::=	( "<<" | ">>" | ">>>" )
RelationalExpression	::=	ShiftExpression ( RelationalOperator ShiftExpression )*
RelationalOperator	::=	( "<" | ">" | "<=" | ">=" | "instanceof" | "in" )
EqualityExpression	::=	RelationalExpression ( EqualityOperator RelationalExpression )*
EqualityOperator	::=	( "==" | "!=" | "===" | "!==" )
BitwiseANDExpression	::=	EqualityExpression ( BitwiseANDOperator EqualityExpression )*
BitwiseANDOperator	::=	"&"
BitwiseXORExpression	::=	BitwiseANDExpression ( BitwiseXOROperator BitwiseANDExpression )*
BitwiseXOROperator	::=	"^"
BitwiseORExpression	::=	BitwiseXORExpression ( BitwiseOROperator BitwiseXORExpression )*
BitwiseOROperator	::=	"|"
LogicalANDExpression	::=	BitwiseORExpression ( LogicalANDOperator BitwiseORExpression )*
LogicalANDOperator	::=	"&&"
LogicalORExpression	::=	LogicalANDExpression ( LogicalOROperator LogicalANDExpression )*
LogicalOROperator	::=	"||"
ConditionalExpression	::=	LogicalORExpression ( "?" AssignmentExpression ":" AssignmentExpression )?
AssignmentExpression	::=	( LeftHandSideExpression AssignmentOperator AssignmentExpression | ConditionalExpression )
AssignmentOperator	::=	( "=" | "*=" | <SLASHASSIGN> | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" )
Expression	::=	AssignmentExpression ( "," AssignmentExpression )*
Statement	::=	Block
            |	VariableStatement
            |	EmptyStatement
            |	LabelledStatement
            |	ExpressionStatement
            |	IfStatement
            |	IterationStatement
            |	ContinueStatement
            |	BreakStatement
            |	ReturnStatement
            |	WithStatement
            |	SwitchStatement
            |	ThrowStatement
            |	TryStatement
Block	::=	"{" ( StatementList )? "}"
StatementList	::=	( Statement )+
VariableStatement	::=	"var" VariableDeclarationList ( ";" )?
VariableDeclarationList	::=	VariableDeclaration ( "," VariableDeclaration )*
VariableDeclaration	::=	Identifier ( Initialiser )?
Initialiser	::=	"=" AssignmentExpression
EmptyStatement	::=	";"
ExpressionStatement	::=	Expression ( ";" )?
IfStatement	::=	"if" "(" Expression ")" Statement ( "else" Statement )?
IterationStatement	::=	( "do" Statement "while" "(" Expression ")" ( ";" )? )
                    |	( "while" "(" Expression ")" Statement )
                    |	( "for" "(" ( Expression )? ";" ( Expression )? ";" ( Expression )? ")" Statement )
                    |	( "for" "(" "var" VariableDeclarationList ";" ( Expression )? ";" ( Expression )? ")" Statement )
                    |	( "for" "(" "var" VariableDeclaration "in" Expression ")" Statement )
                    |	( "for" "(" LeftHandSideExpression "in" Expression ")" Statement )
ContinueStatement	::=	"continue" ( Identifier )? ( ";" )?
BreakStatement	::=	"break" ( Identifier )? ( ";" )?
ReturnStatement	::=	"return" ( Expression )? ( ";" )?
WithStatement	::=	"with" "(" Expression ")" Statement
SwitchStatement	::=	"switch" "(" Expression ")" CaseBlock
CaseBlock	::=	"{" ( CaseClauses )? ( "}" | DefaultClause ( CaseClauses )? "}" )
CaseClauses	::=	( CaseClause )+
CaseClause	::=	( ( "case" Expression ":" ) ) ( StatementList )?
DefaultClause	::=	( ( "default" ":" ) ) ( StatementList )?
LabelledStatement	::=	Identifier ":" Statement
ThrowStatement	::=	"throw" Expression ( ";" )?
TryStatement	::=	"try" Block ( ( Finally | Catch ( Finally )? ) )
Catch	::=	"catch" "(" Identifier ")" Block
Finally	::=	"finally" Block
FunctionDeclaration	::=	"function" Identifier ( "(" ( FormalParameterList )? ")" ) FunctionBody
FunctionExpression	::=	"function" ( Identifier )? ( "(" ( FormalParameterList )? ")" ) FunctionBody
FormalParameterList	::=	Identifier ( "," Identifier )*
FunctionBody	::=	"{" ( SourceElements )? "}"
Program	::=	( SourceElements )? <EOF>
SourceElements	::=	( SourceElement )+
SourceElement	::=	FunctionDeclaration
                |	Statement